package knorxx.framework.generator.web;

import com.google.common.base.Optional;
import com.google.common.collect.Lists;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import knorxx.framework.generator.JavaFileWithSource;
import knorxx.framework.generator.single.SingleFileGenerator;
import knorxx.framework.generator.single.SingleFileGeneratorException;
import knorxx.framework.generator.single.SingleResult;
import knorxx.framework.generator.web.generator.EnumGenerator;
import knorxx.framework.generator.web.generator.PreGeneratedSourceGenerator;
import knorxx.framework.generator.web.generator.SpecialFileGenerator;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author sj
 */
public class WebSingleFileGenerator extends SingleFileGenerator {
	
	private final Logger logger = LoggerFactory.getLogger(this.getClass());
    
	private final SingleFileGenerator genericSingleFileGenerator;
    private final String allowedGenerationPackage;
	
	private final PreGeneratedSourceGenerator preGeneratedSourceGenerator;
	private final List<SingleFileGenerator> generators = new ArrayList<>();

    public WebSingleFileGenerator(SingleFileGenerator genericSingleFileGenerator, String allowedGenerationPackage, 
			SingleFileGenerator...specialFileGenerators) {
		this.genericSingleFileGenerator = genericSingleFileGenerator;
		this.allowedGenerationPackage = allowedGenerationPackage;
		
		preGeneratedSourceGenerator = new PreGeneratedSourceGenerator();
		
		generators.add(preGeneratedSourceGenerator);
		generators.addAll(Lists.newArrayList(specialFileGenerators));
		generators.add(new EnumGenerator());
		generators.add(genericSingleFileGenerator);
    }

    @Override
    public SingleResult generate(JavaFileWithSource<?> javaFile, ClassLoader classLoader, 
			Set<String> allowedPackages) throws SingleFileGeneratorException {
		logger.info("Generating JavaScript for {}", javaFile.getJavaClassName());
		
		SingleFileGenerator generator = getGenerator(javaFile.getJavaClass()).get();
		logger.debug("Using a generator of the class {}", generator.getClass().getSimpleName());
		return generator.generate(javaFile, classLoader, allowedPackages);
    }

    @Override
    public boolean isGeneratable(Class<?> javaClass) {        
		for (SingleFileGenerator generator : generators) {
			if(generator.isGeneratable(javaClass)) {
				if(generator == preGeneratedSourceGenerator || 
						generator != genericSingleFileGenerator ||
						(generator == genericSingleFileGenerator && javaClass.getPackage().getName().startsWith(allowedGenerationPackage))) {
					logger.debug("{} can be generated by {}", javaClass.getSimpleName(), generator.getClass().getSimpleName());
					return true;
				} 
			}
		}
		
		return false;
    }

	@Override
	public Set<String> removeNotGeneratableJavaClasses(Class javaClass, Set<String> javaClassNames, ClassLoader classLoader) {
		SingleFileGenerator generator = getGenerator(javaClass).get();
		
		// NOTE Special file generators are allowed to pre-filter their dependent files.
		if(generator instanceof SpecialFileGenerator) {
			javaClassNames = generator.removeNotGeneratableJavaClasses(javaClass, javaClassNames, classLoader);
		}
		
		return super.removeNotGeneratableJavaClasses(javaClass, javaClassNames, classLoader);
	}
	
	private Optional<SingleFileGenerator> getGenerator(Class<?> javaClass) {
		for (SingleFileGenerator generator : generators) {
			if (generator.isGeneratable(javaClass)) {
				return Optional.of(generator);
			}
		}

		return Optional.absent();
	}	
}
